package cmd

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *S3Target) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "URL":
			z.URL, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "URL")
				return
			}
		case "AccessKey":
			z.AccessKey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AccessKey")
				return
			}
		case "SecretKey":
			z.SecretKey, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SecretKey")
				return
			}
		case "SessionToken":
			z.SessionToken, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SessionToken")
				return
			}
		case "API":
			z.API, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "API")
				return
			}
		case "Lookup":
			z.Lookup, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Lookup")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *S3Target) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "URL"
	err = en.Append(0x86, 0xa3, 0x55, 0x52, 0x4c)
	if err != nil {
		return
	}
	err = en.WriteString(z.URL)
	if err != nil {
		err = msgp.WrapError(err, "URL")
		return
	}
	// write "AccessKey"
	err = en.Append(0xa9, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.AccessKey)
	if err != nil {
		err = msgp.WrapError(err, "AccessKey")
		return
	}
	// write "SecretKey"
	err = en.Append(0xa9, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.SecretKey)
	if err != nil {
		err = msgp.WrapError(err, "SecretKey")
		return
	}
	// write "SessionToken"
	err = en.Append(0xac, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.SessionToken)
	if err != nil {
		err = msgp.WrapError(err, "SessionToken")
		return
	}
	// write "API"
	err = en.Append(0xa3, 0x41, 0x50, 0x49)
	if err != nil {
		return
	}
	err = en.WriteString(z.API)
	if err != nil {
		err = msgp.WrapError(err, "API")
		return
	}
	// write "Lookup"
	err = en.Append(0xa6, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.Lookup)
	if err != nil {
		err = msgp.WrapError(err, "Lookup")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *S3Target) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "URL"
	o = append(o, 0x86, 0xa3, 0x55, 0x52, 0x4c)
	o = msgp.AppendString(o, z.URL)
	// string "AccessKey"
	o = append(o, 0xa9, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.AccessKey)
	// string "SecretKey"
	o = append(o, 0xa9, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79)
	o = msgp.AppendString(o, z.SecretKey)
	// string "SessionToken"
	o = append(o, 0xac, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	o = msgp.AppendString(o, z.SessionToken)
	// string "API"
	o = append(o, 0xa3, 0x41, 0x50, 0x49)
	o = msgp.AppendString(o, z.API)
	// string "Lookup"
	o = append(o, 0xa6, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70)
	o = msgp.AppendString(o, z.Lookup)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *S3Target) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "URL":
			z.URL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "URL")
				return
			}
		case "AccessKey":
			z.AccessKey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccessKey")
				return
			}
		case "SecretKey":
			z.SecretKey, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SecretKey")
				return
			}
		case "SessionToken":
			z.SessionToken, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SessionToken")
				return
			}
		case "API":
			z.API, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "API")
				return
			}
		case "Lookup":
			z.Lookup, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Lookup")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *S3Target) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.URL) + 10 + msgp.StringPrefixSize + len(z.AccessKey) + 10 + msgp.StringPrefixSize + len(z.SecretKey) + 13 + msgp.StringPrefixSize + len(z.SessionToken) + 4 + msgp.StringPrefixSize + len(z.API) + 7 + msgp.StringPrefixSize + len(z.Lookup)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SnapshotEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "k":
			z.Key, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "vid":
			z.VersionID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		case "s":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "mt":
			z.ModTime, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "ModTime")
				return
			}
		case "sc":
			z.StorageClass, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "StorageClass")
				return
			}
		case "etag":
			z.ETag, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ETag")
				return
			}
		case "idm":
			z.IsDeleteMarker, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsDeleteMarker")
				return
			}
		case "il":
			z.IsLatest, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsLatest")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SnapshotEntry) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "k"
	err = en.Append(0x88, 0xa1, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteString(z.Key)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "vid"
	err = en.Append(0xa3, 0x76, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.VersionID)
	if err != nil {
		err = msgp.WrapError(err, "VersionID")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "mt"
	err = en.Append(0xa2, 0x6d, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.ModTime)
	if err != nil {
		err = msgp.WrapError(err, "ModTime")
		return
	}
	// write "sc"
	err = en.Append(0xa2, 0x73, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.StorageClass)
	if err != nil {
		err = msgp.WrapError(err, "StorageClass")
		return
	}
	// write "etag"
	err = en.Append(0xa4, 0x65, 0x74, 0x61, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.ETag)
	if err != nil {
		err = msgp.WrapError(err, "ETag")
		return
	}
	// write "idm"
	err = en.Append(0xa3, 0x69, 0x64, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsDeleteMarker)
	if err != nil {
		err = msgp.WrapError(err, "IsDeleteMarker")
		return
	}
	// write "il"
	err = en.Append(0xa2, 0x69, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsLatest)
	if err != nil {
		err = msgp.WrapError(err, "IsLatest")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SnapshotEntry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "k"
	o = append(o, 0x88, 0xa1, 0x6b)
	o = msgp.AppendString(o, z.Key)
	// string "vid"
	o = append(o, 0xa3, 0x76, 0x69, 0x64)
	o = msgp.AppendString(o, z.VersionID)
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendInt64(o, z.Size)
	// string "mt"
	o = append(o, 0xa2, 0x6d, 0x74)
	o = msgp.AppendTime(o, z.ModTime)
	// string "sc"
	o = append(o, 0xa2, 0x73, 0x63)
	o = msgp.AppendString(o, z.StorageClass)
	// string "etag"
	o = append(o, 0xa4, 0x65, 0x74, 0x61, 0x67)
	o = msgp.AppendString(o, z.ETag)
	// string "idm"
	o = append(o, 0xa3, 0x69, 0x64, 0x6d)
	o = msgp.AppendBool(o, z.IsDeleteMarker)
	// string "il"
	o = append(o, 0xa2, 0x69, 0x6c)
	o = msgp.AppendBool(o, z.IsLatest)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SnapshotEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "k":
			z.Key, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "vid":
			z.VersionID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		case "s":
			z.Size, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "mt":
			z.ModTime, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ModTime")
				return
			}
		case "sc":
			z.StorageClass, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StorageClass")
				return
			}
		case "etag":
			z.ETag, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ETag")
				return
			}
		case "idm":
			z.IsDeleteMarker, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsDeleteMarker")
				return
			}
		case "il":
			z.IsLatest, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsLatest")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SnapshotEntry) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.Key) + 4 + msgp.StringPrefixSize + len(z.VersionID) + 2 + msgp.Int64Size + 3 + msgp.TimeSize + 3 + msgp.StringPrefixSize + len(z.StorageClass) + 5 + msgp.StringPrefixSize + len(z.ETag) + 4 + msgp.BoolSize + 3 + msgp.BoolSize
	return
}
